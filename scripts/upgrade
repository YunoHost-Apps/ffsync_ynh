#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source ./_common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app $app --key path)
final_path=$(ynh_app_setting_get --app $app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
secret=$(ynh_app_setting_get --app $app --key=secret)
db_pwd=$(ynh_app_setting_get --app=$app --key mysqlpwd)
port=$(ynh_app_setting_get --app=$app --key web_port)
db_user=$app

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Checking backware compatibility..." --weight=10

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/opt/yunohost/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

if [ -z "${port:-}" ]; then
	# Find available ports
	port=$(ynh_find_port --port 6000)
	ynh_app_setting_set --app $app --key web_port --value $port
fi

# If path_url doesn't exist, create it
if [ -z "$path_url" ]; then
	path_url=$(ynh_app_setting_get --app=$app --key=path)
	ynh_app_setting_set --app=$app --key=path --value="$path_url"
	ynh_app_setting_delete "$app" path
fi

# Detect old installation style
if [ -e /etc/init.d/ffsync ]; then
	service ffsync stop
	update-rc.d -f ffsync remove

	ynh_secure_remove --file=/etc/init.d/ffsync
	ynh_secure_remove --file=/var/log/ffsync.log
	ynh_secure_remove --file=/opt/yunohost/ffsync

	yunohost service remove "$app"
fi

# Remove old service ending with  ".service"
if ynh_exec_warn_less yunohost service status "uwsgi-app@$app.service" >/dev/null
then
	yunohost service remove uwsgi-app@$app.service
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=10

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Checking backware compatibility..." --weight=10

# Detect old installation with uwsgi
if [ -e /etc/uwsgi/apps-available/$app.ini ]; then
	systemctl stop uwsgi-app@$app.service
	systemctl disable --quiet uwsgi-app@$app.service
	yunohost service remove "uwsgi-app@$app"
	ynh_secure_remove --file=/etc/uwsgi/apps-available/$app.ini
	ynh_secure_remove --file=/etc/systemd/system/uwsgi-app@$app.service.d
	ynh_secure_remove --file=$final_path
else
	systemctl stop $app.service
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..." --weight=6

# Download, check integrity, uncompress and patch the source from app.src
if [ -e $final_path/syncserver.ini ]; then
	config_backup="$(cat $final_path/syncserver.ini)"
	install_sources
	echo "$config_backup" > $final_path/syncserver.ini
else
	install_sources
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX"

if [ "$path_url" == "/" ]
then
	# $finalnginxconf comes from ynh_add_nginx_config
	# uwsgi_param is only needed for non-root installation
	is_subpath="# "
else
	is_subpath=" "
fi
ynh_add_nginx_config 'is_subpath'

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_system_user_create --username="$app"

#=================================================
# SPECIFIC UPGRADE
#=================================================
ynh_script_progression --message="Configuring application..."

# SETUP UWSGI
# create config file syncserver.ini
ynh_script_progression --message="Configuring application..."
ynh_add_config --template="syncserver.ini" --destination="$final_path/syncserver.ini"

# Configure init script
ynh_script_progression --message="Configuring a systemd service..." --weight=2
ynh_add_systemd_config

# Upgrade database table
ynh_mysql_execute_as_root --sql='ALTER TABLE `users` ADD COLUMN IF NOT EXISTS `keys_changed_at` BIGINT NULL AFTER `replaced_at`;' --database=$db_name
ynh_mysql_execute_as_root --sql='ALTER TABLE `users` ADD COLUMN IF NOT EXISTS `node` VARCHAR(255) NULL AFTER `keys_changed_at`;' --database=$db_name

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
set_permissions

#=================================================
# Migrate legacy permissions to new system
#=================================================
ynh_script_progression --message="Set permissions..."

if ynh_legacy_permissions_exists
then
    ynh_legacy_permissions_delete_all
    ynh_app_setting_delete --app=$app --key=is_public
fi
ynh_permission_update --permission=main --add=visitors --protected=true --show_tile=true

yunohost service add "$app"

ynh_script_progression --message="Restarting $app services..." --weight=3
ynh_systemd_action --service_name "$app.service" \
    --line_match "Booting worker with pid" --log_path "systemd" -t 20

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
